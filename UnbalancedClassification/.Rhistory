while( minorityClassIndex != mostClassIndex){
minorityIndexes = which(data[,labelIndex] == minorityClass)
#iterar por cada uno de los indices de los minoritarios
for(i in 1:length(minorityIndexes)){
nnI = getNeighbours(minorityIndexes[i],minorityIndexes[-i],data)
siI = syntheticInstance(data[minorityIndexes[i],],nnI)
data = rbind(data,siI)
}
instancesInfo = countUnique(data[,labelIndex])
minorityClassIndex = which(instancesInfo$count == min(instancesInfo$count))
mostClassIndex = which(instancesInfo$count == max(instancesInfo$count))
minorityClass = instancesInfo$classes[minorityClassIndex]
mostClass = instancesInfo$classes[mostClassIndex]
}
return(minorityIndexes)
}
data2 = smote(subclus,3)
countUnique = function(data){
classes = NULL
if(is.factor(data)){
classes = levels(data)
}
else{
classes = unique(data)
}
count = vector(mode = "integer", length = length(classes))
names(count) = classes
for(i in 1:length(classes)){
count[i] = sum(classes[i] == data )
}
return(list(count=count,classes=classes))
}
smote = function(data,labelIndex){
#instancesInfo = countUnique(data[,labelIndex]) #Cuenta y listado de clases
#Supose number of clases = 2
# minorityClassIndex = which(instancesInfo$count == min(instancesInfo$count))
# mostClassIndex = which(instancesInfo$count == max(instancesInfo$count))
#
# minorityClass = instancesInfo$classes[minorityClassIndex]
# mostClass = instancesInfo$classes[mostClassIndex]
#
# instancesMin = instancesInfo$count[minorityClassIndex]
# instancesMax = instancesInfo$count[mostClassIndex]
# while( minorityClassIndex != mostClassIndex){
#   minorityIndexes = which(data[,labelIndex] == minorityClass)
#
#   #iterar por cada uno de los indices de los minoritarios
#   for(i in 1:length(minorityIndexes)){
#     nnI = getNeighbours(minorityIndexes[i],minorityIndexes[-i],data)
#     siI = syntheticInstance(data[minorityIndexes[i],],nnI)
#     data = rbind(data,siI)
#   }
#
#   instancesInfo = countUnique(data[,labelIndex])
#
#   minorityClassIndex = which(instancesInfo$count == min(instancesInfo$count))
#   mostClassIndex = which(instancesInfo$count == max(instancesInfo$count))
#
#   minorityClass = instancesInfo$classes[minorityClassIndex]
#   mostClass = instancesInfo$classes[mostClassIndex]
#
# }
while(getIR(data[,labelIndex]) > 1){
minorityIndexes = which(data[,labelIndex] == minorityClass)
for(i in 1:length(minorityIndexes)){
nnI = getNeighbours(minorityIndexes[i],minorityIndexes[-i],data)
siI = syntheticInstance(data[minorityIndexes[i],],nnI)
data = rbind(data,siI)
}
}
return(data)
}
data2 = smote(subclus,3)
syntheticInstance = function(x,nearestNeighbours){
chosenNeighbourIndex = round(runif(1)*5)+1
chosenNeighbour = nearestNeighbours[chosenNeighbourIndex,]
result =  NULL
for(i in 1:length(x)){
if(is.factor(x[i])){
result = c(result, ifelse(runif(1) > 0.5, x[i],chosenNeighbour[i]))
}
else{
increment = abs(x[i]-chosenNeighbour[i])*runif(1)
minimum = min(x[i],as.numeric(chosenNeighbour[i]))
result = c(result,minimum+increment)
}
}
return(result)
}
#Nota mental: habrá que elegir un único valor aleatorio para todos los atributos(?)
si = syntheticInstance(subclus[SubclussCVperm_pos[1,1],],getNeigbours(SubclussCVperm_pos[1,1],SubclussCVperm_pos[,2],subclus))
countUnique = function(data){
classes = NULL
if(is.factor(data)){
classes = levels(data)
}
else{
classes = unique(data)
}
count = vector(mode = "integer", length = length(classes))
names(count) = classes
for(i in 1:length(classes)){
count[i] = sum(classes[i] == data )
}
return(list(count=count,classes=classes))
}
smote = function(data,labelIndex){
#instancesInfo = countUnique(data[,labelIndex]) #Cuenta y listado de clases
#Supose number of clases = 2
# minorityClassIndex = which(instancesInfo$count == min(instancesInfo$count))
# mostClassIndex = which(instancesInfo$count == max(instancesInfo$count))
#
# minorityClass = instancesInfo$classes[minorityClassIndex]
# mostClass = instancesInfo$classes[mostClassIndex]
#
# instancesMin = instancesInfo$count[minorityClassIndex]
# instancesMax = instancesInfo$count[mostClassIndex]
# while( minorityClassIndex != mostClassIndex){
#   minorityIndexes = which(data[,labelIndex] == minorityClass)
#
#   #iterar por cada uno de los indices de los minoritarios
#   for(i in 1:length(minorityIndexes)){
#     nnI = getNeighbours(minorityIndexes[i],minorityIndexes[-i],data)
#     siI = syntheticInstance(data[minorityIndexes[i],],nnI)
#     data = rbind(data,siI)
#   }
#
#   instancesInfo = countUnique(data[,labelIndex])
#
#   minorityClassIndex = which(instancesInfo$count == min(instancesInfo$count))
#   mostClassIndex = which(instancesInfo$count == max(instancesInfo$count))
#
#   minorityClass = instancesInfo$classes[minorityClassIndex]
#   mostClass = instancesInfo$classes[mostClassIndex]
#
# }
while(getIR(data[,labelIndex]) > 1){
minorityIndexes = which(data[,labelIndex] == 0)
for(i in 1:length(minorityIndexes)){
nnI = getNeighbours(minorityIndexes[i],minorityIndexes[-i],data)
siI = syntheticInstance(data[minorityIndexes[i],],nnI)
data = rbind(data,siI)
}
}
return(data)
}
data2 = smote(subclus,3)
countUnique = function(data){
classes = NULL
if(is.factor(data)){
classes = levels(data)
}
else{
classes = unique(data)
}
count = vector(mode = "integer", length = length(classes))
names(count) = classes
for(i in 1:length(classes)){
count[i] = sum(classes[i] == data )
}
return(list(count=count,classes=classes))
}
smote = function(data,labelIndex){
#instancesInfo = countUnique(data[,labelIndex]) #Cuenta y listado de clases
#Supose number of clases = 2
# minorityClassIndex = which(instancesInfo$count == min(instancesInfo$count))
# mostClassIndex = which(instancesInfo$count == max(instancesInfo$count))
#
# minorityClass = instancesInfo$classes[minorityClassIndex]
# mostClass = instancesInfo$classes[mostClassIndex]
#
# instancesMin = instancesInfo$count[minorityClassIndex]
# instancesMax = instancesInfo$count[mostClassIndex]
# while( minorityClassIndex != mostClassIndex){
#   minorityIndexes = which(data[,labelIndex] == minorityClass)
#
#   #iterar por cada uno de los indices de los minoritarios
#   for(i in 1:length(minorityIndexes)){
#     nnI = getNeighbours(minorityIndexes[i],minorityIndexes[-i],data)
#     siI = syntheticInstance(data[minorityIndexes[i],],nnI)
#     data = rbind(data,siI)
#   }
#
#   instancesInfo = countUnique(data[,labelIndex])
#
#   minorityClassIndex = which(instancesInfo$count == min(instancesInfo$count))
#   mostClassIndex = which(instancesInfo$count == max(instancesInfo$count))
#
#   minorityClass = instancesInfo$classes[minorityClassIndex]
#   mostClass = instancesInfo$classes[mostClassIndex]
#
# }
#while(getIR(data[,labelIndex]) > 1){
for(ir in 1:round(getIR(data[,labelIndex]))){
minorityIndexes = which(data[,labelIndex] == 0)
for(i in 1:length(minorityIndexes)){
nnI = getNeighbours(minorityIndexes[i],minorityIndexes[-i],data)
siI = syntheticInstance(data[minorityIndexes[i],],nnI)
data = rbind(data,siI)
}
}
return(data)
}
data2 = smote(subclus,3)
remove(data)
smote = function(data,labelIndex){
it = 0
for(ir in 1:round(getIR(data[,labelIndex]))){
minorityIndexes = which(data[,labelIndex] == 0)
for(i in 1:length(minorityIndexes)){
nnI = getNeighbours(minorityIndexes[i],minorityIndexes[-i],data)
siI = syntheticInstance(data[minorityIndexes[i],],nnI)
data = rbind(data,siI)
it = it +1
it
}
}
return(data)
}
data2 = smote(subclus,3)
setwd("~/DataScience/DataScienceInR/UnbalancedClassification")
purl("ImbalancedClassification.Rmd")
library(knitr)
purl("ImbalancedClassification.Rmd")
data2 = smote(subclus,3)
data2 = smote(subclus,3)
debugSource('~/DataScience/DataScienceInR/UnbalancedClassification/ImbalancedClassification.R')
debugSource('~/DataScience/DataScienceInR/UnbalancedClassification/ImbalancedClassification.R')
data2 = smote(subclus,3)
debugSource('~/DataScience/DataScienceInR/UnbalancedClassification/ImbalancedClassification.R')
smote = function(data,labelIndex){
it = 0
for(ir in 1:round(getIR(data[,labelIndex]))){
for(i in 1:length(minorityIndexes)){
minorityIndexes = which(data[,labelIndex] == 0)
nnI = getNeighbours(minorityIndexes[i],minorityIndexes[-i],data)
siI = syntheticInstance(data[minorityIndexes[i],],nnI)
data = rbind(data,siI)
it = it +1
it
}
}
return(data)
}
data2 = smote(subclus,3)
data2 = smote(subclus,3)
source('~/DataScience/DataScienceInR/UnbalancedClassification/ImbalancedClassification.R')
source('~/DataScience/DataScienceInR/UnbalancedClassification/ImbalancedClassification.R')
smote = function(data,labelIndex){
for(ir in 1:round(getIR(data[,labelIndex]))){
for(i in 1:length(minorityIndexes)){
minorityIndexes = which(data[,labelIndex] == 0)
nnI = getNeighbours(minorityIndexes[i],minorityIndexes[-i],data)
siI = syntheticInstance(data[minorityIndexes[i],],nnI)
data = rbind(data,siI)
}
}
return(data)
}
smote = function(data,labelIndex){
for(ir in 1:round(getIR(data[,labelIndex]))){
for(i in 1:length(minorityIndexes)){
minorityIndexes = which(data[,labelIndex] == 0)
nnI = getNeighbours(minorityIndexes[i],minorityIndexes[-i],data)
siI = syntheticInstance(data[minorityIndexes[i],],nnI)
data = rbind(data,siI)
}
}
return(data)
}
data2 = smote(subclus,3)
smote = function(data,labelIndex){
minorityIndexes = which(data[,labelIndex] == 0)
for(ir in 1:round(getIR(data[,labelIndex]))){
for(i in 1:length(minorityIndexes)){
nnI = getNeighbours(minorityIndexes[i],minorityIndexes[-i],data)
siI = syntheticInstance(data[minorityIndexes[i],],nnI)
data = rbind(data,siI)
}
}
return(data)
}
data2 = smote(subclus,3)
smote = function(data,labelIndex){
minorityIndexes = which(data[,labelIndex] == 0)
it=0
for(ir in 1:round(getIR(data[,labelIndex]))){
for(i in 1:length(minorityIndexes)){
nnI = getNeighbours(minorityIndexes[i],minorityIndexes[-i],data)
siI = syntheticInstance(data[minorityIndexes[i],],nnI)
data = rbind(data,siI)
it = it+1
it
}
}
return(data)
}
data2 = smote(subclus,3)
getIR(data2)
getIR(data2[,3])
getIR(data2$Class)
View(data2)
plot(data2$Att1, data2$Att2, main="Subcluss2")
points(data2[data2$Class==0,1],data2[data2$Class==0,2],col="red")
plot(data2$Att1, data2$Att2, main="Subcluss2")
points(data2[data2$Class==0,1],data2[data2$Class==0,2],col="red")
points(data2[data2$Class==1,1],data2[data2$Class==1,2],col="blue")
circle2 = smote(circle,3)
plot(circle2$Att1, circle2$Att2, main="circle2s")
points(circle2[circle2$Class==0,1],circle2[circle2$Class==0,2],col="red")
points(circle2[circle2$Class==1,1],circle2[circle2$Class==1,2],col="blue")
plot(data2$Att1, data2$Att2, main="Subcluss2")
points(data2[data2$Class==0,1],data2[data2$Class==0,2],col="red")
points(data2[data2$Class==1,1],data2[data2$Class==1,2],col="blue")
pos <- (1:dim(data2)[1])[data2$Class==0]
neg <- (1:dim(data2)[1])[data2$Class==1]
d2CVperm_pos <- matrix(sample(pos,length(pos)), ncol=5, byrow=T)
d2CVperm_neg <- matrix(sample(neg,length(neg)), ncol=5, byrow=T)
d2perm <- rbind(SubclussCVperm_pos, SubclussCVperm_neg)
knn.pred = NULL
for( i in 1:5){
predictions <- knn(data2[-d2CVperm[,i], -3], data2[d2CVperm[,i], -3], data[-d2CVperm[,i], 3], k = 3)
knn.pred <- c(knn.pred, predictions)
}
pos <- (1:dim(data2)[1])[data2$Class==0]
neg <- (1:dim(data2)[1])[data2$Class==1]
d2CVperm_pos <- matrix(sample(pos,length(pos)), ncol=5, byrow=T)
d2CVperm_neg <- matrix(sample(neg,length(neg)), ncol=5, byrow=T)
d2CVperm <- rbind(SubclussCVperm_pos, SubclussCVperm_neg)
knn.pred = NULL
for( i in 1:5){
predictions <- knn(data2[-d2CVperm[,i], -3], data2[d2CVperm[,i], -3], data[-d2CVperm[,i], 3], k = 3)
knn.pred <- c(knn.pred, predictions)
}
knn.pred = NULL
for( i in 1:5){
predictions <- knn(data2[-d2CVperm[,i], -3], data2[d2CVperm[,i], -3], data2[-d2CVperm[,i], 3], k = 3)
knn.pred <- c(knn.pred, predictions)
}
plot(circle2$Att1, circle2$Att2, main="circle2s")
points(circle2[circle2$Class==0,1],circle2[circle2$Class==0,2],col="red")
points(circle2[circle2$Class==1,1],circle2[circle2$Class==1,2],col="blue")
pos <- (1:dim(circle2)[1])[circle2$Class==0]
neg <- (1:dim(circle2)[1])[circle2$Class==1]
circle2CVperm_pos <- matrix(sample(pos,length(pos)), ncol=5, byrow=T)
circle2CVperm_neg <- matrix(sample(neg,length(neg)), ncol=5, byrow=T)
circle2CVperm <- rbind(circle2CVperm_pos, circle2CVperm_neg)
knn.pred = NULL
for( i in 1:5){
predictions <- knn(circle2[-circle2CVperm[,i], -3], circle2[circle2CVperm[,i], -3], circle2[-circle2CVperm[,i], 3], k = 3)
knn.pred <- c(knn.pred, predictions)
}
View(circle2CVperm)
smote = function(data,labelIndex){
minorityIndexes = which(data[,labelIndex] == 0)
it=0
for(ir in 1:ceiling(getIR(data[,labelIndex]))){
for(i in 1:length(minorityIndexes)){
nnI = getNeighbours(minorityIndexes[i],minorityIndexes[-i],data)
siI = syntheticInstance(data[minorityIndexes[i],],nnI)
data = rbind(data,siI)
it = it+1
it
}
}
return(data)
}
data2 = smote(subclus,3)
plot(data2$Att1, data2$Att2, main="Subcluss2")
points(data2[data2$Class==0,1],data2[data2$Class==0,2],col="red")
points(data2[data2$Class==1,1],data2[data2$Class==1,2],col="blue")
#todo: gmean
plot(data2$Att1, data2$Att2, main="Subcluss2")
points(data2[data2$Class==0,1],data2[data2$Class==0,2],col="red")
points(data2[data2$Class==1,1],data2[data2$Class==1,2],col="blue")
View(data2)
syntheticInstance = function(x,nearestNeighbours){
chosenNeighbourIndex = round(runif(1)*5)+1
chosenNeighbour = nearestNeighbours[chosenNeighbourIndex,]
result =  NULL
for(i in 1:length(x)){
if(is.factor(x[i])){
result = c(result, ifelse(runif(1) > 0.5, x[i],chosenNeighbour[i]))
}
else{
increment = abs(x[i]-as.numeric(chosenNeighbour[i]))*runif(1)
minimum = min(x[i],as.numeric(chosenNeighbour[i]))
result = c(result,minimum+increment)
}
}
return(result)
}
#Nota mental: habrá que elegir un único valor aleatorio para todos los atributos(?)
si = syntheticInstance(subclus[SubclussCVperm_pos[1,1],],getNeigbours(SubclussCVperm_pos[1,1],SubclussCVperm_pos[,2],subclus))
smote = function(data,labelIndex){
minorityIndexes = which(data[,labelIndex] == 0)
for(ir in 1:ceiling(getIR(data[,labelIndex]))){
for(i in 1:length(minorityIndexes)){
nnI = getNeighbours(minorityIndexes[i],minorityIndexes[-i],data)
siI = syntheticInstance(data[minorityIndexes[i],],nnI)
data = rbind(data,siI)
}
}
return(data)
}
data2 = smote(subclus,3)
plot(data2$Att1, data2$Att2, main="Subcluss2")
points(data2[data2$Class==0,1],data2[data2$Class==0,2],col="red")
points(data2[data2$Class==1,1],data2[data2$Class==1,2],col="blue")
View(data2)
syntheticInstance = function(x,nearestNeighbours){
chosenNeighbourIndex = round(runif(1)*5)+1
chosenNeighbour = nearestNeighbours[chosenNeighbourIndex,]
result =  NULL
for(i in 1:length(x)){
if(is.factor(x[i])){
result = c(result, ifelse(runif(1) > 0.5, x[i],chosenNeighbour[i]))
}
else{
increment = abs(as.numeric(x[i])-as.numeric(chosenNeighbour[i]))*runif(1)
minimum = min(as.numeric(x[i]),as.numeric(chosenNeighbour[i]))
result = c(result,minimum+increment)
}
}
return(result)
}
#Nota mental: habrá que elegir un único valor aleatorio para todos los atributos(?)
#si = syntheticInstance(subclus[SubclussCVperm_pos[1,1],],getNeigbours(SubclussCVperm_pos[1,1],SubclussCVperm_pos[,2],subclus))
data2 = smote(subclus,3)
plot(data2$Att1, data2$Att2, main="Subcluss2")
points(data2[data2$Class==0,1],data2[data2$Class==0,2],col="red")
points(data2[data2$Class==1,1],data2[data2$Class==1,2],col="blue")
data2 = na.omit(data2)
pos <- (1:dim(data2)[1])[data2$Class==0]
neg <- (1:dim(data2)[1])[data2$Class==1]
d2CVperm_pos <- matrix(sample(pos,length(pos)), ncol=5, byrow=T)
d2CVperm_neg <- matrix(sample(neg,length(neg)), ncol=5, byrow=T)
d2CVperm <- rbind(SubclussCVperm_pos, SubclussCVperm_neg)
knn.pred = NULL
for( i in 1:5){
predictions <- knn(data2[-d2CVperm[,i], -3], data2[d2CVperm[,i], -3], data2[-d2CVperm[,i], 3], k = 3)
knn.pred <- c(knn.pred, predictions)
}
acc <- sum((data2$Class[as.vector(d2CVperm)] == 0 & knn.pred == 1)
| (data2$Class[as.vector(d2CVperm)] == 1 & knn.pred == 2)) / (sum(data2$Class == 0) + sum(data2$Class == 1))
tpr <- sum(data2$Class[as.vector(d2CVperm)] == 0 & knn.pred == 1) / sum(data2$Class == 0)
tnr <- sum(data2$Class[as.vector(d2CVperm)] == 1 & knn.pred == 2) / sum(data$Class == 1)
tpr <- sum(data2$Class[as.vector(d2CVperm)] == 0 & knn.pred == 1) / sum(data2$Class == 0)
tnr <- sum(data2$Class[as.vector(d2CVperm)] == 1 & knn.pred == 2) / sum(data2$Class == 1)
gmean <- sqrt(tpr * tnr)
gmean
circle2 = smote(circle,3)
syntheticInstance = function(x,nearestNeighbours){
chosenNeighbourIndex = ceiling(runif(1)*5)
chosenNeighbour = nearestNeighbours[chosenNeighbourIndex,]
result =  NULL
for(i in 1:length(x)){
if(is.factor(x[i])){
result = c(result, ifelse(runif(1) > 0.5, x[i],chosenNeighbour[i]))
}
else{
increment = abs(as.numeric(x[i])-as.numeric(chosenNeighbour[i]))*runif(1)
minimum = min(as.numeric(x[i]),as.numeric(chosenNeighbour[i]))
result = c(result,minimum+increment)
}
}
return(result)
}
#Nota mental: habrá que elegir un único valor aleatorio para todos los atributos(?)
#si = syntheticInstance(subclus[SubclussCVperm_pos[1,1],],getNeigbours(SubclussCVperm_pos[1,1],SubclussCVperm_pos[,2],subclus))
data2 = smote(subclus,3)
View(data2)
plot(data2$Att1, data2$Att2, main="Subcluss2")
points(data2[data2$Class==0,1],data2[data2$Class==0,2],col="red")
points(data2[data2$Class==1,1],data2[data2$Class==1,2],col="blue")
pos <- (1:dim(data2)[1])[data2$Class==0]
neg <- (1:dim(data2)[1])[data2$Class==1]
d2CVperm_pos <- matrix(sample(pos,length(pos)), ncol=5, byrow=T)
d2CVperm_neg <- matrix(sample(neg,length(neg)), ncol=5, byrow=T)
d2CVperm <- rbind(SubclussCVperm_pos, SubclussCVperm_neg)
knn.pred = NULL
for( i in 1:5){
predictions <- knn(data2[-d2CVperm[,i], -3], data2[d2CVperm[,i], -3], data2[-d2CVperm[,i], 3], k = 3)
knn.pred <- c(knn.pred, predictions)
}
acc <- sum((data2$Class[as.vector(d2CVperm)] == 0 & knn.pred == 1)
| (data2$Class[as.vector(d2CVperm)] == 1 & knn.pred == 2)) / (sum(data2$Class == 0) + sum(data2$Class == 1))
tpr <- sum(data2$Class[as.vector(d2CVperm)] == 0 & knn.pred == 1) / sum(data2$Class == 0)
tnr <- sum(data2$Class[as.vector(d2CVperm)] == 1 & knn.pred == 2) / sum(data2$Class == 1)
gmean <- sqrt(tpr * tnr)
gmean
circle2 = smote(circle,3)
plot(circle2$Att1, circle2$Att2, main="circle2s")
points(circle2[circle2$Class==0,1],circle2[circle2$Class==0,2],col="red")
points(circle2[circle2$Class==1,1],circle2[circle2$Class==1,2],col="blue")
pos <- (1:dim(circle2)[1])[circle2$Class==0]
neg <- (1:dim(circle2)[1])[circle2$Class==1]
circle2CVperm_pos <- matrix(sample(pos,length(pos)), ncol=5, byrow=T)
circle2CVperm_neg <- matrix(sample(neg,length(neg)), ncol=5, byrow=T)
circle2CVperm <- rbind(circle2CVperm_pos, circle2CVperm_neg)
knn.pred = NULL
for( i in 1:5){
predictions <- knn(circle2[-circle2CVperm[,i], -3], circle2[circle2CVperm[,i], -3], circle2[-circle2CVperm[,i], 3], k = 3)
knn.pred <- c(knn.pred, predictions)
}
acc <- sum((circle2$Class[as.vector(circle2CVperm)] == 0 & knn.pred == 1)
| (circle2$Class[as.vector(circle2CVperm)] == 1 & knn.pred == 2)) / (sum(circle2$Class == 0) + sum(circle2$Class == 1))
tpr <- sum(circle2$Class[as.vector(circle2CVperm)] == 0 & knn.pred == 1) / sum(circle2$Class == 0)
tnr <- sum(circle2$Class[as.vector(circle2CVperm)] == 1 & knn.pred == 2) / sum(circle2$Class == 1)
gmean <- sqrt(tpr * tnr)
gmean
purl("ImbalancedClassification.Rmd")
