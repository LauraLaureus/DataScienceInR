else{
0
}
}))/length(bag.datos$y))
}
resul = as.data.frame(cbind(predicted = yhat.bag, y=iris.test[,5]))
acierto(resul)
bag.iris = randomForest(Species~.,data=iris ,subset =train , ntree=25)
bag.iris
resul2 = as.data.frame(cbind(predicted = bag.iris, y=iris.test[,5]))
acierto(resul2)
? for
?for
help("for")
error = c()
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
error = c()
#En un bucle crear un arbol medir el error y añadir el error a una estructura
for (i in 1:num_trees) {
tree = randomForest(Species~.,data = iris,subset = train, ntree = i)
prediction = predict(tree,newdata =iris.test)
resul = as.data.frame(cbind(predicted = yhat.bag, y=iris.test[,5]))
a = acierto(resul)
error = c(error, a)
}
#Plotear el listado
plot(1:num_trees, error)
}
Graphical_RF(iris,Species~.,100)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
error = c()
#En un bucle crear un arbol medir el error y añadir el error a una estructura
for (i in 1:num_trees) {
tree = randomForest(Species~.,data = iris,subset = train, ntree = i)
prediction = predict(tree,newdata =iris.test)
resul = as.data.frame(cbind(predicted = prediction, y=iris.test[,5]))
a = acierto(resul)
error = c(error, a)
}
#Plotear el listado
plot(1:num_trees, error)
}
Graphical_RF(iris,Species~.,100)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
error = c()
set.seed (2)
train=sample (1:nrow(datos), round(nrow(datos)*0.6))
test=datos[-train ,]
#En un bucle crear un arbol medir el error y añadir el error a una estructura
for (i in 1:num_trees) {
tree = randomForest(formula,data=datos,subset = train, ntree = i)
prediction = predict(tree,newdata = test)
resul = as.data.frame(cbind(predicted = prediction, y=iris.test[,5]))
a = acierto(resul)
error = c(error, a)
}
#Plotear el listado
plot(1:num_trees, error)
}
Graphical_RF(iris,Species~.,100)
a = acierto(tree)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
error = c()
set.seed (2)
train=sample (1:nrow(datos), round(nrow(datos)*0.6))
test=datos[-train ,]
#En un bucle crear un arbol medir el error y añadir el error a una estructura
for (i in 1:num_trees) {
tree = randomForest(formula,data=datos,subset = train, ntree = i)
#prediction = predict(tree,newdata = test)
#result = as.data.frame(cbind(predicted = prediction, y=iris.test[,5]))
#a = acierto(result)
a = acierto(tree)
error = c(error, a)
}
#Plotear el listado
plot(1:num_trees, error)
}
Graphical_RF(iris,Species~.,100)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
error = c()
set.seed (2)
train=sample (1:nrow(datos), round(nrow(datos)*0.6))
test=datos[-train ,]
#En un bucle crear un arbol medir el error y añadir el error a una estructura
for (i in 1:num_trees) {
tree = randomForest(formula,data=datos,subset = train, ntree = i)
prediction = predict(tree,newdata = test)
result = as.data.frame(cbind(predicted = prediction, y=iris.test[,ncol(datos)]))
a = acierto(result)
#a = acierto(tree)
error = c(error, a)
}
#Plotear el listado
plot(1:num_trees, error)
}
Graphical_RF(iris,Species~.,100)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
error = c()
set.seed (2)
train=sample (1:nrow(datos), round(nrow(datos)*0.6))
test=datos[-train ,]
#En un bucle crear un arbol medir el error y añadir el error a una estructura
for (i in 1:num_trees) {
tree = randomForest(formula,data=datos,subset = train, ntree = i)
prediction = predict(tree,newdata = test)
result = as.data.frame(cbind(predicted = prediction, y=iris.test[,ncol(datos)]))
#a = acierto(result)
a = acierto(prediction)
#a = acierto(tree)
error = c(error, a)
}
#Plotear el listado
plot(1:num_trees, error)
}
Graphical_RF(iris,Species~.,100)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
error = c()
set.seed (2)
train=sample (1:nrow(datos), round(nrow(datos)*0.6))
test=datos[-train ,]
#En un bucle crear un arbol medir el error y añadir el error a una estructura
for (i in 1:num_trees) {
tree = randomForest(formula,data=datos,subset = train, ntree = i)
prediction = predict(tree,newdata = test)
#result = as.data.frame(cbind(predicted = prediction, y=iris.test[,ncol(datos)]))
#a = acierto(result)
a = acierto(prediction)
#a = acierto(tree)
error = c(error, a)
}
#Plotear el listado
plot(1:num_trees, error)
}
Graphical_RF(iris,Species~.,100)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
error = c()
set.seed (2)
train=sample (1:nrow(datos), round(nrow(datos)*0.6))
test=datos[-train ,]
#En un bucle crear un arbol medir el error y añadir el error a una estructura
for (i in 1:num_trees) {
tree = randomForest(formula,data=datos,subset = train, ntree = i)
prediction = predict(tree,newdata = test)
#result = as.data.frame(cbind(predicted = prediction, y=iris.test[,ncol(datos)]))
#a = acierto(result)
#a = acierto(prediction)
a = acierto(tree)
error = c(error, a)
}
#Plotear el listado
plot(1:num_trees, error)
}
Graphical_RF(iris,Species~.,100)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
error = c()
set.seed (2)
train=sample (1:nrow(datos), round(nrow(datos)*0.6))
test=datos[-train ,]
#En un bucle crear un arbol medir el error y añadir el error a una estructura
for (i in 1:num_trees) {
tree = randomForest(formula,data=datos,subset = train, ntree = i)
prediction = predict(tree,newdata = test)
result = as.data.frame(cbind(predicted = prediction, y=datos[,ncol(datos)]))
a = acierto(result)
#a = acierto(prediction)
#a = acierto(tree)
error = c(error, a)
}
#Plotear el listado
plot(1:num_trees, error)
}
Graphical_RF(iris,Species~.,100)
str(iris)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
error = c()
set.seed (2)
train=sample (1:nrow(datos), round(nrow(datos)*0.6))
test=datos[-train ,]
#En un bucle crear un arbol medir el error y añadir el error a una estructura
for (i in 1:num_trees) {
tree = randomForest(formula,data=datos,subset = train, ntree = i)
prediction = predict(tree,newdata = test)
result = as.data.frame(cbind(predicted = prediction, y=as.numeric(datos[,ncol(datos)])))
a = acierto(result)
#a = acierto(prediction)
#a = acierto(tree)
error = c(error, a)
}
#Plotear el listado
plot(1:num_trees, error)
}
Graphical_RF(iris,Species~.,100)
library(ISLR)
Graphical_RF(datos,origin~.-name,100)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
error = c()
set.seed (2)
train=sample (1:nrow(datos), round(nrow(datos)*0.6))
test=datos[-train ,]
#En un bucle crear un arbol medir el error y añadir el error a una estructura
for (i in 1:num_trees) {
tree = randomForest(formula,data=datos,subset = train, ntree = i)
prediction = predict(tree,newdata = test)
result = as.data.frame(cbind(predicted = prediction, y=as.numeric(datos[,ncol(datos)])))
#a = acierto(result)
a = acierto(tree)
error = c(error, a)
}
#Plotear el listado
plot(1:num_trees, error)
}
Graphical_RF(iris,Species~.,100)
Graphical_RF <- function(datos, formula, num_trees){
# Definir aqui la funcion
error = c()
set.seed (2)
train=sample (1:nrow(datos), round(nrow(datos)*0.6))
test=datos[-train ,]
#En un bucle crear un arbol medir el error y añadir el error a una estructura
for (i in 1:num_trees) {
tree = randomForest(formula,data=datos,subset = train, ntree = i)
prediction = predict(tree,newdata = test)
#result = as.data.frame(cbind(predicted = prediction, y=as.numeric(datos[,ncol(datos)])))
#a = acierto(result)
a = acierto(tree)
error = c(error, a)
}
#Plotear el listado
plot(1:num_trees, error)
}
Graphical_RF(iris,Species~.,100)
Graphical_RF(datos,origin~.-name,100)
str(Auto)
datos = Auto
attach(Auto)
Graphical_RF(datos,origin~.-name,100)
library (gbm)
install.packages("gbm")
library (gbm)
set.seed (1)
boost.iris =gbm(Species~.,data=iris[train,],
distribution="multinomial",n.trees =5000,
interaction.depth =4)
summary(boost.iris)
yhat.boost=predict (boost.iris ,newdata =iris[-train,],
n.trees =5000)
yhat.boost
yhat.boost = matrix(yhat.boost,ncol=(length(yhat.boost)/nrow(iris.test)))
yhat.boost.y = sapply(1:nrow(iris.test), function(x){
which.max(yhat.boost[x,])
})
(sum(yhat.boost.y == as.numeric(iris.test[,5]))/nrow(iris.test))*100
install.packages("RWeka")
library(RWeka)
?J48
modelC4.5 = J48(Species~., data=iris, subset=train)
modelC4.5.pred = predict(modelC4.5, iris.test)
install.packages("partykit")
library(partykit)
plot(modelC4.5)
modelC4.5.pred
resul = as.data.frame(cbind(predicted = modelC4.5.pred, y=iris.test[,5]))
acierto(resul)
modelC4.5 = J48(Species~., data=iris)
cv_resul = evaluate_Weka_classifier(modelC4.5,numFolds=10)
cv_resul
library(RWeka)
set.seed(9)
train = sample(1:nrow(iris),2*nrow(iris)/3)
iris.test = iris[-train,]
model.Ripper = JRip(Species~., iris, subset=train)
summary(model.Ripper)
model.Ripper.pred = predict(model.Ripper, newdata = iris.test)
(sum(model.Ripper.pred == iris.test[,5])/nrow(iris.test)*100)
model.Ripper
model.Part = PART(Species~., iris, subset=train)
summary(model.Part)
model.Part.pred = predict(model.Part, newdata = iris.test)
(sum(model.Part.pred == iris.test[,5])/nrow(iris.test)*100)
model.Part
model.Ripper = JRip(Species~., iris)
cv_JRip = evaluate_Weka_classifier(model.Ripper,numFolds=nrow(iris))
cv_JRip$details[1]
model.Part = PART(Species~., iris)
cv_Part = evaluate_Weka_classifier(model.Part,numFolds=nrow(iris))
cv_Part$details[1]
datos = Auto
datos[,8] = as.factor(datos[,8])
model.Ripper = JRip(origin~., datos)
cv_JRip = evaluate_Weka_classifier(model.Ripper,numFolds=nrow(datos))
cv_JRip$details[1]
model.Part = PART(origin~., datos)
cv_Part = evaluate_Weka_classifier(model.Part,numFolds=nrow(datos))
cv_Part$details[1]
?sweep
centroides.valores      = sweep(centroides.normalizados.iris,
2,
mis.datos.desviaciones,
"*")
centroides.valores = sweep(centroides.valores,2,mis.datos.medias, "+")
centroides valores
centroides.valores
australian <- read.csv("./AustralianClassification/australian/australian.dat", comment.char = "@", header = FALSE)
setwd("~/DataScience/DataScienceInR/IntroductionDataScienceFinalProject")
australian <- read.csv("./AustralianClassification/australian/australian.dat", comment.char = "@", header = FALSE)
names(australian) <- c("A1","A2","A3","A4","A5","A6","A7","A8","A9","A10","A11","A12","A13","A14","A15")
# Solo las clases numéricas
numerical_stats <- summary(australian[,c(-1,-4,-8,-9,-11,-12,-15)])
numerical_std <- apply(australian[,c(-1,-4,-8,-9,-11,-12,-15)],2,sd)
pairs(australian[,c(-1,-4,-8,-9,-11,-12)], main = "Comparación de las variables numéricas con la salida")
plot(australian[,2],australian[,15], main = "Comparación A2 con la salida")
plot(australian[,3],australian[,15], main = "Comparación A3 con la salida")
plot(australian[,5],australian[,15], main = "Comparación A5 con la salida")
plot(australian[,6],australian[,15], main = "Comparación A6 con la salida")
plot(australian[,7],australian[,15], main = "Comparación A7 con la salida")
plot(australian[,10],australian[,15], main = "Comparación A10 con la salida")
plot(australian[,13],australian[,15], main = "Comparación A13 con la salida")
plot(australian[,14],australian[,15], main = "Comparación A15 con la salida")
pairs(australian[,c(-1,-4,-8,-9,-11,-12,-15)], main = "Comparación de las variables numéricas entre ellas",col=ifelse(australian[,15]== 1,"red","blue"))
categorical_stats <- summary(australian[,c(1,4,8,9,11,12)])
categorical_stats[-4,]
table(australian[,c(1,4,8,9,11,12)])
?table
tl <-table(australian[,c(1,4,8,9,11,12)])
tl
??mode
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
Mode(australian[, c(1,4,8,9,11,12)])
Mode(australian[,1])
Mode(australian[,4])
Mode(australian[,8])
Mode(australian[,9])
rbind(categorical_stats, apply(australian[,c(1,4,8,9,11,12)], 2,Mode))
categorical_stats <- summary(australian[,c(1,4,8,9,11,12)])
categorical_stats <- categorical_stats[-4,]
Mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
categorical_stats <- rbind(categorical_stats, apply(australian[,c(1,4,8,9,11,12)], 2,Mode))
categorical_stats
hist(australian[which(australian[,15] == 1),1])
hist(australian[which(australian[,15] == 1),1], col = "blue")
hist(australian[which(australian[,15] == 1),1], col = "red")
hist(australian[which(australian[,15] == 1),1], col = "blue")
```
hist(australian[which(australian[,15] == 0),1], col = "red")
hist(australian[which(australian[,15] == 1),4], col = "blue")
hist(australian[which(australian[,15] == 0),4], col = "red")
par(new = TRUE)
hist(australian[which(australian[,15] == 1),4], col = "blue")
par(new = FALSE)
hist(australian[which(australian[,15] == 0),4], col = "red")
hist(australian[which(australian[,15] == 1),4], col = "blue")
par(new = FALSE)
hist(australian[which(australian[,15] == 0),4], col = "red")
hist(australian[which(australian[,15] == 1),1], col = "blue")
hist(australian[which(australian[,15] == 0),1], col = "red")
hist(australian[which(australian[,15] == 1),4], col = "blue")
hist(australian[which(australian[,15] == 0),4], col = "red")
hist(australian[which(australian[,15] == 1),1], col = "blue")
hist(australian[which(australian[,15] == 0),1], col = "red", add = T)
hist(australian[which(australian[,15] == 1),1], col = "blue", ylim = c(0,1000))
hist(australian[which(australian[,15] == 0),1], col = "red", add = T)
hist(australian[which(australian[,15] == 0),1], col = "red")
hist(australian[which(australian[,15] == 1),1], col = "blue",add = T)
hist(australian[which(australian[,15] == 1),4], col = "blue")
hist(australian[which(australian[,15] == 0),4], col = "red", add = T)
hist(australian[which(australian[,15] == 1),8], col = "blue")
hist(australian[which(australian[,15] == 0),8], col = "red", add = T)
hist(australian[which(australian[,15] == 1),9], col = "blue")
hist(australian[which(australian[,15] == 0),9], col = "red", add = T)
hist(australian[which(australian[,15] == 1),11], col = "blue")
hist(australian[which(australian[,15] == 0),11], col = "red", add = T)
hist(australian[which(australian[,15] == 1),12], col = "blue")
hist(australian[which(australian[,15] == 0),12], col = "red", add = T)
hist(australian[which(australian[,15] == 1),4], col = "blue")
hist(australian[which(australian[,15] == 0),4], col = "red", add = T)
hist(australian[which(australian[,15] == 0),8], col = "red")
hist(australian[which(australian[,15] == 1),8], col = "blue", add = T)
hist(australian[which(australian[,15] == 0),9], col = "red")
hist(australian[which(australian[,15] == 1),9], col = "blue", add = T)
hist(australian[which(australian[,15] == 0),11], col = "red")
hist(australian[which(australian[,15] == 1),11], col = "blue", add = T)
hist(australian[which(australian[,15] == 0),12], col = "red")
hist(australian[which(australian[,15] == 1),12], col = "blue", add = T)
hist(australian[which(australian[,15] == 1),4], col = "blue")
hist(australian[which(australian[,15] == 0),4], col = "red", add = T)
hist(australian[which(australian[,15] == 0),8], col = "blue")
hist(australian[which(australian[,15] == 1),8], col = "red", add = T)
plot(h1)
plot(h2, add = T)
hist(australian[which(australian[,15] == 0),9], col = "red")
hist(australian[which(australian[,15] == 1),9], col = "blue", add = T)
plot(h1, col=rgb(1,0,0,1))
plot(h2, col=rgb(0,1,0,0.4), add = T)
h1 <- hist(australian[which(australian[,15] == 0),8])
h2 <- hist(australian[which(australian[,15] == 1),8])
plot(h1, col=rgb(1,0,0,1))
plot(h2, col=rgb(0,1,0,0.4), add = T)
h1 <- hist(australian[which(australian[,15] == 0),1])
h2 <- hist(australian[which(australian[,15] == 1),1])
plot(h1, col=rgb(1,0,0,1))
plot(h2, col=rgb(0,0,1,0.4), add = T, main ="Comparación de los ")
h1 <- hist(australian[which(australian[,15] == 0),1])
h2 <- hist(australian[which(australian[,15] == 1),1])
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1")
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1", ylab = "Frecuencia", xlab = "Categoría")
plot(h2, col=rgb(0,0,1,0.4), add = T)
barplot(australian[,1])
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1", ylab = "Frecuencia", xlab = "Categoría")
plot(h2, col=rgb(0,0,1,0.4), add = T)
legend("topcenter",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"))
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"))
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"))
h1 <- hist(australian[which(australian[,15] == 0),1])
h2 <- hist(australian[which(australian[,15] == 1),1])
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1", ylab = "Frecuencia", xlab = "Categoría")
plot(h2, col=rgb(0,0,1,0.4), add = T)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"), pch=16)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"))
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"), box.lwd = 200)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"), box.lwd = 20)
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1", ylab = "Frecuencia", xlab = "Categoría")
plot(h2, col=rgb(0,0,1,0.4), add = T)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"), box.lwd = 20)
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1", ylab = "Frecuencia", xlab = "Categoría")
plot(h2, col=rgb(0,0,1,0.4), add = T)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"),box.lty = 1, box.lwd = 20)
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1", ylab = "Frecuencia", xlab = "Categoría")
plot(h2, col=rgb(0,0,1,0.4), add = T)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"),box.lty = 1, box.lwd = 40)
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1", ylab = "Frecuencia", xlab = "Categoría")
plot(h2, col=rgb(0,0,1,0.4), add = T)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"), bty = "o",box.lty = 1, box.lwd = 0)
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1", ylab = "Frecuencia", xlab = "Categoría")
plot(h2, col=rgb(0,0,1,0.4), add = T)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"), bty = "o",box.lty = 1, box.lwd = 40)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"), bty = "o", box.lty = 1, box.lwd = 10)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"), bty = "o", box.lwd = 10)
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1", ylab = "Frecuencia", xlab = "Categoría")
plot(h2, col=rgb(0,0,1,0.4), add = T)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"), bty = "o", box.lwd = 10)
#TODO título para todos
#TODO ejes para todos
#TODO leyenda para todos
hist(australian[which(australian[,15] == 1),4], col = "blue")
hist(australian[which(australian[,15] == 0),4], col = "red", add = T)
h1 <- hist(australian[which(australian[,15] == 0),8])
h2 <- hist(australian[which(australian[,15] == 1),8])
plot(h1, col=rgb(1,0,0,1))
plot(h2, col=rgb(0,1,0,0.4), add = T)
h1 <- hist(australian[which(australian[,15] == 0),9])
h2 <- hist(australian[which(australian[,15] == 1),9])
plot(h1, col=rgb(1,0,0,1))
plot(h2, col=rgb(0,1,0,0.4), add = T)
h1 <- hist(australian[which(australian[,15] == 0),1])
h2 <- hist(australian[which(australian[,15] == 1),1])
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1", ylab = "Frecuencia", xlab = "Categoría")
plot(h2, col=rgb(0,0,1,0.4), add = T)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"), bty = "o", box.lwd = 10, text.width = 100)
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1", ylab = "Frecuencia", xlab = "Categoría")
plot(h2, col=rgb(0,0,1,0.4), add = T)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"), bty = "o", text.width = 50)
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1", ylab = "Frecuencia", xlab = "Categoría")
plot(h2, col=rgb(0,0,1,0.4), add = T)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"), bty = "o", text.width = 10)
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1", ylab = "Frecuencia", xlab = "Categoría")
plot(h2, col=rgb(0,0,1,0.4), add = T)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"), text.width = 10)
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1", ylab = "Frecuencia", xlab = "Categoría")
plot(h2, col=rgb(0,0,1,0.4), add = T)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"), text.width = 1)
require(ggplot2)
ggpo <- ggplot(australian[which(australian[,15] == 0),1]) + geom_histogram()
ggpo <- ggplot(australian[which(australian[,15] == 0),1]) + geom_histogram()
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1", ylab = "Frecuencia", xlab = "Categoría")
plot(h2, col=rgb(0,0,1,0.4), add = T)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"), text.width = 0.1)
h1 <- hist(australian[which(australian[,15] == 0),1])
h2 <- hist(australian[which(australian[,15] == 1),1])
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1", ylab = "Frecuencia", xlab = "Categoría")
plot(h2, col=rgb(0,0,1,0.4), add = T)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"), text.width = 1)
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1", ylab = "Frecuencia", xlab = "Categoría")
plot(h2, col=rgb(0,0,1,0.4), add = T)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"), text.width = 0.5)
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1", ylab = "Frecuencia", xlab = "Categoría")
plot(h2, col=rgb(0,0,1,0.4), add = T)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"), text.width = 0.5, pch = 16)
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1", ylab = "Frecuencia", xlab = "Categoría")
plot(h2, col=rgb(0,0,1,0.4), add = T)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"), col = c("red","violeta"), text.width = 0.5)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"),  text.width = 0.5, col = c("red","blue")
plot(h1, col=rgb(1,0,0,1), main ="Frecuencia de la variable A1", ylab = "Frecuencia", xlab = "Categoría")
plot(h2, col=rgb(0,0,1,0.4), add = T)
legend("topleft",legend = c("A1 cuando la salida es 0", "A1 cuando la salida es 1"),  text.width = 0.5, col = c("red","blue"), pch = 16)
