cat('\n')
if (test.de.Grubbs$p.value < alpha){
indice.de.outlier.Grubbs = order(abs(datos - mean(datos)), decreasing = T)[1]
indice.de.outlier.Grubbs
cat('?ndice de outlier: ')
cat(indice.de.outlier.Grubbs)
cat('\n')
valor.de.outlier.Grubbs  = datos[indice.de.outlier.Grubbs]
cat('Valor del outlier: ')
cat(valor.de.outlier.Grubbs)
MiPlot_Univariate_Outliers (datos, "Test de Grubbs", indice.de.outlier.Grubbs)
}
else
cat('No hay outliers')
}
MiPlot_resultados_TestRosner = function(datos){
test.de.rosner = rosnerTest(datos, k=4)
is.outlier.rosner = test.de.rosner$all.stats$Outlier
k.mayores.desviaciones.de.la.media = test.de.rosner$all.stats$Obs.Num
indices.de.outliers.rosner = k.mayores.desviaciones.de.la.media[is.outlier.rosner]
valores.de.outliers.rosner = datos[indices.de.outliers.rosner]
cat("\nTest de Rosner")
cat("\n?ndices de las k-mayores desviaciones de la media: ")
cat(k.mayores.desviaciones.de.la.media)
cat("\nDe las k mayores desviaciones, ?Qui?n es outlier? ")
cat(is.outlier.rosner)
cat("\nLos ?ndices de los outliers son: ")
cat(indices.de.outliers.rosner)
cat("\nLos valores de los outliers son: ")
cat(valores.de.outliers.rosner)
MiPlot_Univariate_Outliers (datos, indices.de.outliers.rosner, "Test de Rosner")
}
MiBiplot = function(datos){
PCA.model = princomp(scale(datos))
biplot = ggbiplot(PCA.model, obs.scale = 1, var.scale=1 , varname.size = 5,alpha = 1/2)
x11()
print(biplot)
}
MiBiPlot_Multivariate_Outliers = function (datos, vectorTFoutliers, titulo){
identificadores_de_datos = rownames(datos)
identificadores_de_datos[!vectorTFoutliers] = ''
cat(identificadores_de_datos)
PCA.model = princomp(scale(datos))
outlier.shapes = c(".","x") #c(21,8)
biplot = ggbiplot(PCA.model, obs.scale = 1, var.scale=1 , varname.size = 5,groups =  vectorTFoutliers, alpha = 1/2) #alpha = 1/10,
biplot = biplot + labs(color = "Outliers")
biplot = biplot + scale_color_manual(values = c("black","red"))
biplot = biplot + geom_text(label = identificadores_de_datos, stat = "identity", size = 3, hjust=0, vjust=0)
biplot = biplot + ggtitle(titulo)
x11()
print(biplot)
}
MiBiPlot_Clustering_Outliers = function (datos, titulo){
PCA.model = princomp(scale(datos))
outlier.shapes = c("o","x") #c(21,8)
identificadores_de_datos = rownames(datos)
identificadores_de_datos[!BIPLOT.isOutlier] = ''
#cat(identificadores_de_datos)
BIPLOT.asignaciones.clusters = factor(BIPLOT.asignaciones.clusters)
biplot = ggbiplot(PCA.model, obs.scale = 1, var.scale=1 , varname.size = 3, alpha = 0) +
geom_point(aes(shape = BIPLOT.isOutlier, colour = factor(BIPLOT.asignaciones.clusters)))  +
scale_color_manual(values = BIPLOT.cluster.colors) +
scale_shape_manual(values = outlier.shapes) +
ggtitle(titulo) +
geom_text(label = identificadores_de_datos, stat = "identity", size = 3, hjust=0, vjust=0)
x11()
print(biplot)
}
MiBoxPlot_IQR_Univariate_Outliers(datos,(dim(datos)[2]))
MiBoxPlot_IQR_Univariate_Outliers(datos,1:(dim(datos)[2]))
MiBoxPlot_IQR_Univariate_Outliers(datos,(dim(datos)[2]))
quantiles = function(x){
iqr = quantile(x,0.75) - quantile(x,0.25)
return(iqr)
}
vectorQuantiles = apply(datos,2,quantiles)
vectorQuantiles
remove(vectorQuantiles)
vectorIQR = apply(datos,2,quantiles)
quantiles = function(x){
iqr = quantile(x,0.75) - quantile(x,0.25)
return(iqr,quantile(x,0.75),quantile(x,0.25))
}
vectorIQR = apply(datos,2,quantiles)
vectorQuantiles = apply(datos,2,funtion(x){quantile(x,.25)})
vectorQuantiles = apply(datos,2,function(x){quantile(x,.25)})
vectorQuantiles = rbind(vectorQuantiles,apply(datos,2,function(x){quantile(x,.75)}))
vectorIQR = apply(datos,2,function(x){iqr = quantile(x,0.75) - quantile(x,0.25)})
vectorQuantiles = apply(datos,2,function(x){quantile(x,.25)})
vectorQuantiles = rbind(vectorQuantiles,apply(datos,2,function(x){quantile(x,.75)}))
vectorIQR = rbind(vectorIQR,vectorQuantiles)
vectorQuantiles
vectorIQR
outlierMatrix = matrix(data=FALSE,nrow=(dim(datos)[1]),ncol = (dim(datos)[2]))
outlierMatrix = matrix(data=FALSE,nrow=(dim(datos)[1]),ncol = (dim(datos)[2]))
for(i in 1:(dim(datos)[1])){
for(j in 1:(dim(datos)[2])){
outlierMatrix[i,j] = datos[i,j] > vectorIQR[1,j]*1.5 + vectorIQR[3,j] | datos[i,j] <   vectorIQR[2,j] - vectorIQR[1,j]*1.5
}
}
outlierMatrix
which(outlierMatrix == TRUE)
names(datos)
outlierMatrix[,-c(2,3,4,5,6,8)] = NA
outlierMatrix
outlierMatrix = matrix(data=FALSE,nrow=(dim(datos)[1]),ncol = (dim(datos)[2]))
for(i in 1:(dim(datos)[1])){
for(j in 1:(dim(datos)[2])){
outlierMatrix[i,j] = datos[i,j] > vectorIQR[1,j]*1.5 + vectorIQR[3,j] | datos[i,j] <   vectorIQR[2,j] - vectorIQR[1,j]*1.5
}
}
outlierMatrix[,c(2,3,4,5,6,8)] = NA
outlierMatrix
outlierMatrix = matrix(data=FALSE,nrow=(dim(datos)[1]),ncol = (dim(datos)[2]))
for(i in 1:(dim(datos)[1])){
for(j in 1:(dim(datos)[2])){
outlierMatrix[i,j] = datos[i,j] > vectorIQR[1,j]*1.5 + vectorIQR[3,j] | datos[i,j] <   vectorIQR[2,j] - vectorIQR[1,j]*1.5
}
}
outlierMatrix[,c(2,3,4,5,8)] = NA
outlierMatrix
names(datos)
MiBoxPlot_Univariate_Outliers(datos[,1],which(outlierMatrix[,1]==TRUE),"Number of people")
MiPlot_Univariate_Outliers(datos[,1],which(outlierMatrix[,1]==TRUE),"Number of people")
MiPlot_Univariate_Outliers(datos[,1],which(outlierMatrix[,1]==TRUE),"Number of people")
MiPlot_Univariate_Outliers(datos[,1],which(outlierMatrix[,1]==TRUE),"Number of people")
MiPlot_Univariate_Outliers(datos[,1],which(outlierMatrix[,1]==TRUE),"Number of people")
MiPlot_Univariate_Outliers(datos[,6],which(outlierMatrix[,1]==TRUE),"Apparent Temperature")
knitr::opts_chunk$set(echo = TRUE)
options(width=60)
knitr::opts_chunk$set(comment = "", warning = FALSE, message = FALSE, echo = TRUE, tidy = TRUE, size="small")
datos = read.csv("./data.csv", header = TRUE)
library(ggplot2)
library(devtools)
library(reshape)
library(ggbiplot)
library(rgl)
library(GGally)
library(outliers)
library(EnvStats)
library(mvoutlier)
library(CerioliOutlierDetection)
library(robustbase)
library(mvnormtest)
library(MASS)
library(DMwR)
library(cluster)
MiPlot_Univariate_Outliers = function (datos, indices_de_Outliers, titulo){
numero.de.datos = nrow(as.matrix(datos))
vectorTFoutliers =  rep(FALSE, numero.de.datos)
vectorTFoutliers[indices_de_Outliers] = TRUE
vector.colores.outlier = rep("black", numero.de.datos)
vector.colores.outlier [vectorTFoutliers] = "red"
#cat("\nN?mero de datos: ")
#cat(numero.de.datos)
#cat("\n?Qui?n es outlier?: ")
#cat(vectorTFoutliers)
#cat('\n')
x11()
plot(datos, col=vector.colores.outlier, main = titulo)
}
vector_es_outlier_IQR = function (datos, indice.de.columna, coef = 1.5){
columna.datos = datos[,indice.de.columna]
cuartil.primero = quantile(columna.datos)[2]  #quantile[1] es el m?nimo y quantile[5] el m?ximo.
cuartil.tercero = quantile(columna.datos)[4]
iqr = cuartil.tercero - cuartil.primero
extremo.superior.outlier = (iqr * coef) + cuartil.tercero
extremo.inferior.outlier = cuartil.primero - (iqr * coef)
es.outlier  = columna.datos > extremo.superior.outlier |
columna.datos < extremo.inferior.outlier
return (es.outlier)
}
Nombres_de_Filas = function (datos, vector_TF_datos_a_incluir) {
numero.de.filas = nrow(datos)
if (is.null(row.names(datos)))
row.names(datos) = rep(1:numero.de.filas)
nombres.de.filas = rep("", numero.de.filas)
nombres.de.filas[vector_TF_datos_a_incluir==TRUE] = row.names(datos)[vector_TF_datos_a_incluir==TRUE]
nombres.de.filas
}
vector_claves_outliers_IQR = function(datos, indice, coef = 1.5){
columna.datos = datos[,indice]
vector.de.outliers = vector_es_outlier_IQR(datos, indice, coef)
which(vector.de.outliers  == TRUE)
}
MiBoxPlot_IQR_Univariate_Outliers = function (datos, indice.de.columna, coef = 1.5){
datos = as.data.frame(datos)
vector.TF.outliers.IQR = vector_es_outlier_IQR(datos, indice.de.columna, coef)
nombres.de.filas = Nombres_de_Filas(datos, vector.TF.outliers.IQR)
nombre.de.columna = colnames(datos, indice.de.columna)
ggboxplot = ggplot(data = datos, aes(x=factor(""), y=datos[,indice.de.columna]) , environment = environment()) +
xlab(nombre.de.columna) + ylab("") +
geom_boxplot(outlier.colour = "red") +
geom_text(aes(label = nombres.de.filas)) #, position = position_jitter(width = 0.1))
x11()
ggboxplot
}
MiBoxPlot_juntos  = function (datos, vector_TF_datos_a_incluir = c()){
nombres.de.filas = Nombres_de_Filas(datos, vector_TF_datos_a_incluir)
datos = scale(datos)
datos.melted = melt(datos)
colnames(datos.melted)[2]="Variables"
colnames(datos.melted)[3]="zscore"
factor.melted = colnames(datos.melted)[1]
columna.factor = as.factor(datos.melted[,factor.melted])
levels(columna.factor)[!levels(columna.factor) %in% nombres.de.filas] = ""
ggplot(data = datos.melted, aes(x=Variables, y=zscore), environment = environment()) +
geom_boxplot(outlier.colour = "red") +
geom_text(aes(label = columna.factor), size = 3)
}
MiBoxPlot_juntos_con_etiquetas = function (datos, coef = 1.5){
matriz.datos.TF.outliers = sapply(1:ncol(datos), function(x) vector_es_outlier_IQR(datos, x, coef))  # Aplicamos outlier IQR a cada columna
vector.datos.TF.outliers = apply(matriz.datos.TF.outliers, 1, sum)
vector.datos.TF.outliers[vector.datos.TF.outliers > 1] = 1            # Si un registro es outlier en alguna columna lo incluimos
MiBoxPlot_juntos(datos, vector.datos.TF.outliers)
}
MiPlot_resultados_TestGrubbs = function(datos){
alpha = 0.05
test.de.Grubbs = grubbs.test(datos, two.sided = TRUE)
cat('p.value: ')
cat(test.de.Grubbs$p.value)
cat('\n')
if (test.de.Grubbs$p.value < alpha){
indice.de.outlier.Grubbs = order(abs(datos - mean(datos)), decreasing = T)[1]
indice.de.outlier.Grubbs
cat('?ndice de outlier: ')
cat(indice.de.outlier.Grubbs)
cat('\n')
valor.de.outlier.Grubbs  = datos[indice.de.outlier.Grubbs]
cat('Valor del outlier: ')
cat(valor.de.outlier.Grubbs)
MiPlot_Univariate_Outliers (datos, "Test de Grubbs", indice.de.outlier.Grubbs)
}
else
cat('No hay outliers')
}
MiPlot_resultados_TestRosner = function(datos){
test.de.rosner = rosnerTest(datos, k=4)
is.outlier.rosner = test.de.rosner$all.stats$Outlier
k.mayores.desviaciones.de.la.media = test.de.rosner$all.stats$Obs.Num
indices.de.outliers.rosner = k.mayores.desviaciones.de.la.media[is.outlier.rosner]
valores.de.outliers.rosner = datos[indices.de.outliers.rosner]
cat("\nTest de Rosner")
cat("\n?ndices de las k-mayores desviaciones de la media: ")
cat(k.mayores.desviaciones.de.la.media)
cat("\nDe las k mayores desviaciones, ?Qui?n es outlier? ")
cat(is.outlier.rosner)
cat("\nLos ?ndices de los outliers son: ")
cat(indices.de.outliers.rosner)
cat("\nLos valores de los outliers son: ")
cat(valores.de.outliers.rosner)
MiPlot_Univariate_Outliers (datos, indices.de.outliers.rosner, "Test de Rosner")
}
MiBiplot = function(datos){
PCA.model = princomp(scale(datos))
biplot = ggbiplot(PCA.model, obs.scale = 1, var.scale=1 , varname.size = 5,alpha = 1/2)
x11()
print(biplot)
}
MiBiPlot_Multivariate_Outliers = function (datos, vectorTFoutliers, titulo){
identificadores_de_datos = rownames(datos)
identificadores_de_datos[!vectorTFoutliers] = ''
cat(identificadores_de_datos)
PCA.model = princomp(scale(datos))
outlier.shapes = c(".","x") #c(21,8)
biplot = ggbiplot(PCA.model, obs.scale = 1, var.scale=1 , varname.size = 5,groups =  vectorTFoutliers, alpha = 1/2) #alpha = 1/10,
biplot = biplot + labs(color = "Outliers")
biplot = biplot + scale_color_manual(values = c("black","red"))
biplot = biplot + geom_text(label = identificadores_de_datos, stat = "identity", size = 3, hjust=0, vjust=0)
biplot = biplot + ggtitle(titulo)
x11()
print(biplot)
}
MiBiPlot_Clustering_Outliers = function (datos, titulo){
PCA.model = princomp(scale(datos))
outlier.shapes = c("o","x") #c(21,8)
identificadores_de_datos = rownames(datos)
identificadores_de_datos[!BIPLOT.isOutlier] = ''
#cat(identificadores_de_datos)
BIPLOT.asignaciones.clusters = factor(BIPLOT.asignaciones.clusters)
biplot = ggbiplot(PCA.model, obs.scale = 1, var.scale=1 , varname.size = 3, alpha = 0) +
geom_point(aes(shape = BIPLOT.isOutlier, colour = factor(BIPLOT.asignaciones.clusters)))  +
scale_color_manual(values = BIPLOT.cluster.colors) +
scale_shape_manual(values = outlier.shapes) +
ggtitle(titulo) +
geom_text(label = identificadores_de_datos, stat = "identity", size = 3, hjust=0, vjust=0)
x11()
print(biplot)
}
vectorIQR = apply(datos,2,function(x){iqr = quantile(x,0.75) - quantile(x,0.25)})
vectorQuantiles = apply(datos,2,function(x){quantile(x,.25)})
vectorQuantiles = rbind(vectorQuantiles,apply(datos,2,function(x){quantile(x,.75)}))
vectorIQR = rbind(vectorIQR,vectorQuantiles)
outlierMatrix = matrix(data=FALSE,nrow=(dim(datos)[1]),ncol = (dim(datos)[2]))
for(i in 1:(dim(datos)[1])){
for(j in 1:(dim(datos)[2])){
outlierMatrix[i,j] = datos[i,j] > vectorIQR[1,j]*1.5 + vectorIQR[3,j] | datos[i,j] <   vectorIQR[2,j] - vectorIQR[1,j]*1.5
}
}
outlierMatrix[,c(2,3,4,5,8)] = NA
MiPlot_Univariate_Outliers(datos[,6],which(outlierMatrix[,1]==TRUE),"Apparent Temperature")
MiPlot_Univariate_Outliers(datos[,6],which(outlierMatrix[,1]==TRUE),"Apparent Temperature")
MiPlot_Univariate_Outliers(datos[,6],which(outlierMatrix[,6]==TRUE),"Apparent Temperature")
MiPlot_Univariate_Outliers(datos[,7],which(outlierMatrix[,7]==TRUE),"Temperature")
MiPlot_Univariate_Outliers(datos[,7],which(outlierMatrix[,7]==TRUE),"Temperature")
testGrubb = grubbs.test(datos[,1], two.sided = TRUE)
testGrubb = grubbs.test(datos[,1], two.sided = TRUE)
if(testGrubb$p.value < 0.025){
index = order(abs(datos[,1] - mean(datos[,1])), decreasing = T)[1]
value = datos[index,1]
}
index
value
MiPlot_Univariate_Outliers(datos[,1],index,"Outlier")
MiPlot_Univariate_Outliers(datos[,1],index,"Outlier")
MiPlot_resultados_TestGrubbs(datos[,1])
testRosner = rosnerTest(datos[,1],k=10)
testRosner = rosnerTest(datos[,1],k=10)
isRosnerOutlier = testRosner$all.stats$Outlier
kMayoresDesviacionesMedia = testRosner$all.stats$Obs.Num
indexesOutliers = kMayoresDesviacionesMedia[isRosnerOutlier]
MiPlot_Univariate_Outliers(datos[,1],indexesOutliers,"Rosner Test")
MiPlot_Univariate_Outliers(datos[,1],indexesOutliers,"Rosner Test")
isRosnerOutlier = testRosner$all.stats$Outlier
kMayoresDesviacionesMedia = testRosner$all.stats$Obs.Num
indexesOutliers = kMayoresDesviacionesMedia[isRosnerOutlier]
MiPlot_Univariate_Outliers(datos[,1],indexesOutliers,"Rosner Test")
MiPlot_Univariate_Outliers(datos[,1],indexesOutliers,"Rosner Test")
MiPlot_resultados_TestRosner(datos[,1],k=10)
MiPlot_resultados_TestRosner(datos[,1])
MiPlot_resultados_TestRosner(datos[,1])
MiPlot_resultados_TestRosner(datos[,1])
testRosner = rosnerTest(datos[,1],k=10)
isRosnerOutlier = testRosner$all.stats$Outlier
kMayoresDesviacionesMedia = testRosner$all.stats$Obs.Num
indexesOutliers = kMayoresDesviacionesMedia[isRosnerOutlier]
indexesOutliers
testRosner = rosnerTest(datos[,1],k=10)
isRosnerOutlier = testRosner$all.stats$Outlier
kMayoresDesviacionesMedia = testRosner$all.stats$Obs.Num
indexesOutliers = kMayoresDesviacionesMedia[isRosnerOutlier]
indexesOutliers
testRosner = rosnerTest(datos[,1],k=1)
isRosnerOutlier = testRosner$all.stats$Outlier
kMayoresDesviacionesMedia = testRosner$all.stats$Obs.Num
indexesOutliers = kMayoresDesviacionesMedia[isRosnerOutlier]
indexesOutliers
testRosner = rosnerTest(datos[,1],k=2)
isRosnerOutlier = testRosner$all.stats$Outlier
kMayoresDesviacionesMedia = testRosner$all.stats$Obs.Num
indexesOutliers = kMayoresDesviacionesMedia[isRosnerOutlier]
indexesOutliers
alpha = 0.05
alphaPenalizado = 1- (1 - alpha) ^ (1/nrow(datos))
moutlier = uni.plot(datos,alpha = alphaPenalizado)
moutlier = uni.plot(datos,symb=FALSE,alpha = alphaPenalizado)
x11()
x11()
moutlier = uni.plot(datos,symb=FALSE,alpha = alphaPenalizado)
moutlier = uni.plot(datos[,c(1,6,7)],symb=FALSE,alpha = alphaPenalizado)
moutlier = uni.plot(datos[,c(1,6,7)],symb=FALSE,alpha = alphaPenalizado)
plot3d(x=datos[,1],y=datos[,6], z=datos[,7])
plot3d(x=datos[,1],y=datos[,6], z=datos[,7], col = moutlier$outliers)
plotData = cbind(datos,as.factor(moutlier$outliers))
names(plotData)
plot3d(x=plotData[,1],y=plotData[,6], z=plotData[,7], col = as.factor(moutlier$outliers) )
plot3d(x=plotData[,1],y=plotData[,6], z=plotData[,7], colvar =plotData[,9] )
plot3d(x=plotData[,1],y=plotData[,6], z=plotData[,7], colvar =plotData[,9], col= c("red","green") )
plot3d(x=plotData[,1],y=plotData[,6], z=plotData[,7], colvar =plotData[,9])
sum(moutlier$outliers == TRUE)
sum(moutlier$outliers == FALSE)
plotData = cbind(datos,moutlier$outliers)
plot3d(x=plotData[,1],y=plotData[,6], z=plotData[,7], colvar =plotData[,9], col= c("red","green") )
plot3d(x=plotData[,1],y=plotData[,6], z=plotData[,7], colvar =plotData[,9], col= c("red","black") )
plot3d(x=plotData[,1],y=plotData[,6], z=plotData[,7], colvar =moutlier$outliers, col= c("red","black") )
head(moutlier$outliers)
plot3d(x=plotData[,1],y=plotData[,6], z=plotData[,7], colvar =moutlier$outliers, col= c("black","red") )
MiBoxPlot_juntos(datos[,c(1,6,7)], moutlier$outliers)
MiBiplot(datos[,c(1,6,7)])
MiBiPlot_Multivariate_Outliers(datos[,c(1,6,7)],moutlier$outliers,"outliers")
names(datos)
MiBiPlot_Multivariate_Outliers = function (datos, vectorTFoutliers, titulo){
identificadores_de_datos = rownames(datos)
identificadores_de_datos[!vectorTFoutliers] = ''
cat(identificadores_de_datos)
PCA.model = princomp(scale(datos))
outlier.shapes = c(".","x") #c(21,8)
biplot = ggbiplot(PCA.model, obs.scale = 1, var.scale=1 , varname.size = 5,groups =  vectorTFoutliers) #alpha = 1/10,
biplot = biplot + labs(color = "Outliers")
biplot = biplot + scale_color_manual(values = c("black","red"))
biplot = biplot + geom_text(label = identificadores_de_datos, stat = "identity", size = 3, hjust=0, vjust=0)
biplot = biplot + ggtitle(titulo)
x11()
print(biplot)
}
MiBiPlot_Multivariate_Outliers(datos[,c(1,6,7)],moutlier$outliers,"outliers")
MiBiplot = function(datos){
PCA.model = princomp(scale(datos))
biplot = ggbiplot(PCA.model, obs.scale = 1, var.scale=1 , varname.size = 5)
x11()
print(biplot)
}
scatter3D
plot3d(x=plotData[,1],y=plotData[,6], z=plotData[,7], colvar =as.integer(moutlier$outliers), col= c("black","red") )
legend3d("topright", c("Valores normales", "Anomalías"))
legend3d("topright", c("Valores normales", "Anomalías"), col= c("black","red"), pch=16)
sum(moutier$outliers == TRUE)
sum(moutlier$outliers == TRUE)
names(datos)
plot3d(x=plotData[,1],y=plotData[,6], z=plotData[,7], colvar =moutlier$outliers, col= c("black","red"), xlab = "Número de personas", ylab="Temperatura aparente", zlab="Temperatura")
sum(moutlier$outliers == FALSE)
puntuación = lofactor(datosNormalizados, k= vecinos)
datosNormalizados = scale(datos[,c(1,6,7)])
vecinos = 5
puntuación = lofactor(datosNormalizados, k= vecinos)
puntuaciónOrdenada = sort(puntuación,decreasing = TRUE)
puntuaciónOrdenada
sum(puntuaciónOrdenada = Inf)
sum(puntuaciónOrdenada == Inf)
numOutliers = sum(puntuaciónOrdenada == Inf)  #output: 610
indicesOutliersLOF = rownames(datos) %in% order(puntuación,decreasing = T)[1:numOutliers]
indicesOutliersLOF
plot3d(x=datos[,1],y=datos[,6], z=datos[,7], colvar =indicesOutliersLOF, col= c("black","red"), xlab = "Número de personas", ylab="Temperatura aparente", zlab="Temperatura")
plot3d(x=datos[,1],y=datos[,6], z=datos[,7], colvar =indicesOutliersLOF, col= c("black","red"), xlab = "Número de personas", ylab="Temperatura aparente", zlab="Temperatura")
sum(moutlier$outliers == TRUE)
modeloKmedias = kmeans(datosNormalizados, centers = 1)
indicesKmedias = modeloKmedias$cluster
centroidesKmedias = modeloKmedias$centers
indicesKmedias
modeloKmedias = kmeans(datosNormalizados, centers = 4)
indicesKmedias = modeloKmedias$cluster
centroidesKmedias = modeloKmedias$centers
indicesKmedias
estaciones = c(sum(indicesKmedias == 1), sum(indicesKmedias == 2),sum(indicesKmedias == 3),sum(indicesKmedias == 4))
estaciones
distancias_a_centroides = function (datos.normalizados,
indices.asignacion.clustering,
datos.centroides.normalizados){
sqrt(rowSums(   (datos.normalizados - datos.centroides.normalizados[indices.asignacion.clustering,])^2   ))
}
distanciaCentroides = distancias_a_centroides (datosNormalizados,
indicesKmedias,
centroidesKmedias)
head(distanciaCentroides)
tail(distanciaCentroides)
head(sort(distanciaCentroides,decreasing = T))
tail(sort(distanciaCentroides,decreasing = T))
head(sort(distanciaCentroides,decreasing = T))
head(sort(distanciaCentroides,decreasing = T))[6]
umbral = (head(sort(distanciaCentroides,decreasing = T))[6] - tail(sort(distanciaCentroides,decreasing = T)))/2
umbral
umbral = (head(sort(distanciaCentroides,decreasing = T))[6] - tail(sort(distanciaCentroides,decreasing = T))[6])/2
umbral
umbral = (head(sort(distanciaCentroides,decreasing = T))[1] - tail(sort(distanciaCentroides,decreasing = T))[6])/2
umbral
totalOutliers = sum(distanciaCentroides > umbral)
totalOutliers
View(datos)
top_clustering_outliers = function(datos.normalizados,
indices.asignacion.clustering,
datos.centroides.normalizados,
numero.de.outliers){
dist_centroides = distancias_a_centroides (datos.normalizados,
indices.asignacion.clustering,
datos.centroides.normalizados)
indices = order(dist_centroides, decreasing=T)[1:numero.de.outliers]
list(distancias = dist_centroides[indices]  , indices = indices)
}
topOutliersKmedias = top_clustering_outliers(datosNormalizados,indicesKmedias,centroidesKmedias,totalOutliers)
plot3d(x=datos[,1],y=datos[,6], z=datos[,7], colvar =topOutliersKmedias$indices, col= c("black","red"), xlab = "Número de personas", ylab="Temperatura aparente", zlab="Temperatura")
outliersintersection =  moutlier$outliers %in% indicesOutliersLOF & %in% moutlier$outliers topOutliersKmedias$indices
outliersintersection =  moutlier$outliers %in% indicesOutliersLOF & moutlier$outliers %in%  topOutliersKmedias$indices
length(outliersintersection)
outliersintersection =  moutlier$outliers %in% indicesOutliersLOF
length(outliersintersection)
outliersintersection =  (moutlier$outliers %in% indicesOutliersLOF)
length(outliersintersection)
length(moutlier$outliers)
head(moutlier$outliers)
head(indicesOutliersLOF)
head(topOutliersKmedias$indices)
logicalKmediasIndexes = 1:26066 %in% topOutliersKmedias$indices
head(logicalKmediasIndexes)
length(logicalKmediasIndexes)
outliersintersection = moutlier$outliers & indicesOutliersLOF & logicalKmediasIndexes
sum(outliersintersection)
sum(logicalKmediasIndexes)
outliersintersection = moutlier$outliers & indicesOutliersLOF
sum(outliersintersection)
outliersintersection =  indicesOutliersLOF & logicalKmediasIndexes
sum(outliersintersection)
data.frame(moutlier$outliers,indicesOutliersLOF,logicalKmediasIndexes)
saveOutliers = data.frame(moutlier$outliers,indicesOutliersLOF,logicalKmediasIndexes)
View(saveOutliers)
datos[moutlier$outliers,]
head(datos[moutlier$outliers,])
head(datos[indicesOutliersLOF,])
25211 / (60^2)
35111 / (60^2)
head(datos[logicalKmediasIndexes,])
head(datos[logicalKmediasIndexes,])
43218 / (60^2)
45014 / (60^2)
purl
library(knitr)
purl
purl("OutlierDetection.Rmd")
purl("./OutlierDetection.Rmd")
purl("./DataScience/DataScienceInR/Detección de anomalías/")
setwd("~/DataScience/DataScienceInR/Detección de anomalías")
ls
purl("./OutlierDetection.Rmd")
